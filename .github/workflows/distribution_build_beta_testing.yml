name: "Test & Build iOS App"

on:
  workflow_dispatch:
    branches: "*"

jobs:
  test_build_and_sign:
    runs-on: macos-latest
    steps:
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build archive with diagnostics
        run: |
          xcodebuild -workspace "IBHGithubAction.xcworkspace" \
          -scheme "IBHGithubAction" \
          -archivePath $RUNNER_TEMP/ibhgithubaction.xcarchive \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          -allowProvisioningUpdates \
          clean archive \
          -verbose 2>&1 | tee $RUNNER_TEMP/xcodebuild.log | xcpretty

      - name: List contents of $RUNNER_TEMP
        run: |
          echo "Listing contents of $RUNNER_TEMP:"
          ls -la $RUNNER_TEMP

      - name: Output xcodebuild.log contents
        run: |
          if [ -f "$RUNNER_TEMP/xcodebuild.log" ]; then
            echo "----- xcodebuild.log -----"
            cat "$RUNNER_TEMP/xcodebuild.log"
            echo "----- End of xcodebuild.log -----"
          else
            echo "xcodebuild.log not found."
          fi

      - name: Check if xcodebuild.log exists
        run: |
          ls -la $RUNNER_TEMP
          if [ -f "$RUNNER_TEMP/xcodebuild.log" ]; then
            echo "xcodebuild.log found"
            cat $RUNNER_TEMP/xcodebuild.log
          else
            echo "xcodebuild.log not found"
            exit 1
          fi

      - name: Upload xcodebuild logs as artifact
        uses: actions/upload-artifact@v3
        with:
          name: xcodebuild-log
          path: ${{ runner.temp }}/xcodebuild.log
          retention-days: 3

      - name: Export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/ibhgithubaction.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Verify if IPA file exists
        run: |
          if [ -f "$RUNNER_TEMP/build/IBHGithubAction.ipa" ]; then
            echo "IPA file exists"
          else
            echo "IPA file not found"
            exit 1
          fi

      - name: Upload application as artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/IBHGithubAction.ipa
          retention-days: 3
